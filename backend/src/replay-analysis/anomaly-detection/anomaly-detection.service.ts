// src/replay-analysis/anomaly-detection/anomaly-detection.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Anomaly } from '../entities/anomaly.entity';

export enum AnomalyType {
  SPEED = 'speed',
  AIM = 'aim',
  RESOURCE = 'resource',
  BEHAVIOR = 'behavior',
}

export enum AnomalySeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

@Injectable()
export class AnomalyDetectionService {
  private readonly logger = new Logger(AnomalyDetectionService.name);

  constructor(
    @InjectRepository(Anomaly)
    private anomalyRepository: Repository<Anomaly>,
  ) {}

  async detectAnomalies(replayData: any, patterns: Pattern[], playerId: string, replayId: string): Promise<Anomaly[]> {
    try {
      // Detect speed anomalies
      const speedAnomalies = this.detectSpeedAnomalies(replayData, patterns, playerId, replayId);
      
      // Detect aim anomalies
      const aimAnomalies = this.detectAimAnomalies(replayData, patterns, playerId, replayId);
      
      // Detect resource anomalies
      const resourceAnomalies = this.detectResourceAnomalies(replayData, patterns, playerId, replayId);
      
      // Detect behavior anomalies
      const behaviorAnomalies = this.detectBehaviorAnomalies(replayData, patterns, playerId, replayId);
      
      // Combine all anomalies
      const allAnomalies = [
        ...speedAnomalies,
        ...aimAnomalies,
        ...resourceAnomalies,
        ...behaviorAnomalies,
      ];
      
      // Save anomalies to database
      const savedAnomalies: Anomaly[] = [];
      for (const anomaly of allAnomalies) {
        const savedAnomaly = await this.anomalyRepository.save(anomaly);
        savedAnomalies.push(savedAnomaly);
      }
      
      return savedAnomalies;
    } catch (error) {
      this.logger.error(`Error in anomaly detection: ${error.message}`);
      throw error;
    }
  }

  // Specialized anomaly detection methods
  private detectSpeedAnomalies(replayData: any, patterns: Pattern[], playerId: string, replayId: string): Anomaly[] {
    // Detect movement speed anomalies
    const anomalies: Anomaly[] = [];
    
    // Check for impossible acceleration or speed
    if (replayData.maxSpeed > 50) { // Mock threshold
      anomalies.push({
        id: undefined, // Will be generated by DB
        replayId,
        playerId,
        type: AnomalyType.SPEED,
        name: 'Impossible Speed',
        description: 'Player moves faster than game mechanics allow',
        severity: AnomalySeverity.HIGH,
        data: { 
          detectedSpeed: replayData.maxSpeed,
          allowedSpeed: 50,
          timeIndex: 300 
        },
        confidenceScore: 0.9,
        detectedAt: new Date(),
        isVerified: false,
      });
    }
    
    return anomalies;
  }

  private detectAimAnomalies(replayData: any, patterns: Pattern[], playerId: string, replayId: string): Anomaly[] {
    // Detect aiming anomalies like inhuman precision or tracking through walls
    const anomalies: Anomaly[] = [];
    
    // Check for inhuman reaction time
    if (replayData.minReactionTime < 0.1) { // Humans typically can't react faster than ~150ms
      anomalies.push({
        id: undefined,
        replayId,
        playerId,
        type: AnomalyType.AIM,
        name: 'Inhuman Reaction Time',
        description: 'Player reacts faster than physically possible',
        severity: AnomalySeverity.CRITICAL,
        data: { 
          reactionTime: replayData.minReactionTime,
          humanMinimum: 0.15,
          timeIndex: 450 
        },
        confidenceScore: 0.95,
        detectedAt: new Date(),
        isVerified: false,
      });
    }
    
    return anomalies;
  }

  private detectResourceAnomalies(replayData: any, patterns: Pattern[], playerId: string, replayId: string): Anomaly[] {
    // Detect resource-related anomalies
    return [];
  }

  private detectBehaviorAnomalies(replayData: any, patterns: Pattern[], playerId: string, replayId: string): Anomaly[] {
    // Detect behavior anomalies like perfect information or bot-like behavior
    return [];
  }
}