// src/replay-analysis/reporting/reporting.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Report } from '../entities/report.entity';

export enum ReportStatus {
  PENDING = 'pending',
  INVESTIGATING = 'investigating',
  VERIFIED = 'verified',
  REJECTED = 'rejected',
  RESOLVED = 'resolved',
}

export enum ReportActionTaken {
  NONE = 'none',
  WARNING = 'warning',
  TEMPORARY_BAN = 'temporary_ban',
  PERMANENT_BAN = 'permanent_ban',
}

@Injectable()
export class ReportingService {
  private readonly logger = new Logger(ReportingService.name);

  constructor(
    @InjectRepository(Report)
    private reportRepository: Repository<Report>,
    @InjectRepository(Anomaly)
    private anomalyRepository: Repository<Anomaly>,
  ) {}

  async createReport(
    replayId: string,
    playerId: string,
    anomalyIds: string[],
    title: string,
    description: string,
    isAutoGenerated: boolean = false,
  ): Promise<Report> {
    try {
      // Find anomalies
      const anomalies = await this.anomalyRepository.findByIds(anomalyIds);
      
      // Create report
      const report = this.reportRepository.create({
        replayId,
        playerId,
        title,
        description,
        status: ReportStatus.PENDING,
        actionTaken: ReportActionTaken.NONE,
        isAutoGenerated,
        anomalies,
      });
      
      return this.reportRepository.save(report);
    } catch (error) {
      this.logger.error(`Error creating report: ${error.message}`);
      throw error;
    }
  }

  async getReportsByReplay(replayId: string): Promise<Report[]> {
    return this.reportRepository.find({
      where: { replayId },
      relations: ['anomalies'],
    });
  }

  async updateReport(
    reportId: string,
    status?: ReportStatus,
    actionTaken?: ReportActionTaken,
    notes?: string,
  ): Promise<Report> {
    try {
      const report = await this.reportRepository.findOne(reportId);
      
      if (!report) {
        throw new Error(`Report with ID ${reportId} not found`);
      }
      
      if (status) report.status = status;
      if (actionTaken) report.actionTaken = actionTaken;
      if (notes) report.actionNotes = notes;
      
      if (status === ReportStatus.RESOLVED) {
        report.resolvedAt = new Date();
      }
      
      return this.reportRepository.save(report);
    } catch (error) {
      this.logger.error(`Error updating report: ${error.message}`);
      throw error;
    }
  }
}