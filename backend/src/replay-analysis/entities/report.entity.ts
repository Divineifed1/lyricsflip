// src/replay-analysis/entities/report.entity.ts
@Entity('reports')
export class Report {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  replayId: string;

  @ManyToOne(() => Replay, replay => replay.reports)
  replay: Replay;

  @Column()
  playerId: string;

  @ManyToMany(() => Anomaly, anomaly => anomaly.reports)
  @JoinTable()
  anomalies: Anomaly[];

  @Column()
  title: string;

  @Column()
  description: string;

  @Column({ default: 'pending' })
  status: string;

  @Column({ nullable: true })
  assignedTo?: string;

  @Column({ default: 'none' })
  actionTaken: string;

  @Column({ nullable: true })
  actionNotes?: string;

  @Column({ default: false })
  isAutoGenerated: boolean;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @Column({ nullable: true })
  resolvedAt?: Date;
}

// ADDITIONAL SUGGESTED SUB-ISSUES
/*
1. Machine Learning Integration
   - Implement ML models for more accurate cheating detection
   - Train models with verified cheating examples
   - Create feature extraction pipeline for replay data

2. Real-time Analysis System
   - Develop streaming analysis for live games
   - Create real-time alerting for suspicious behavior
   - Implement incremental analysis to reduce processing time

3. Advanced Visualization Dashboard
   - Create interactive 3D replay visualization
   - Develop comparative analysis tools
   - Add timeline scrubbing with anomaly markers

4. Cross-Game Pattern Library
   - Build a central repository of cheating patterns
   - Implement cross-game analysis capabilities
   - Create a pattern definition language

5. Community Verification System
   - Develop a trusted reviewer program
   - Create a verification workflow for suspected cheating
   - Implement consensus algorithms for verification
*/
